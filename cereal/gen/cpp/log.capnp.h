// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: log.capnp

#ifndef CAPNP_INCLUDED_f3b1f17e25a4285b_
#define CAPNP_INCLUDED_f3b1f17e25a4285b_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "car.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d578fb3372ed5043);
CAPNP_DECLARE_SCHEMA(e71008caeb3fb65c);
CAPNP_DECLARE_SCHEMA(ea0245f695ae0a33);
CAPNP_DECLARE_SCHEMA(9d291d7813ba4a88);
CAPNP_DECLARE_SCHEMA(a2b29a69d44529a1);
CAPNP_DECLARE_SCHEMA(a43429bd2bfc24fc);
CAPNP_DECLARE_SCHEMA(e49b3ce8f7f48d0d);
enum class SensorSource_e49b3ce8f7f48d0d: uint16_t {
  ANDROID,
  I_O_S,
  FIBER,
  VELODYNE,
};
CAPNP_DECLARE_ENUM(SensorSource, e49b3ce8f7f48d0d);
CAPNP_DECLARE_SCHEMA(e946524859add50e);
CAPNP_DECLARE_SCHEMA(8785009a964c7c59);
CAPNP_DECLARE_SCHEMA(8d8231a40b7fe6e0);
CAPNP_DECLARE_SCHEMA(cfa2b0c2c82af1e4);
CAPNP_DECLARE_SCHEMA(c08240f996aefced);
CAPNP_DECLARE_SCHEMA(9a185389d6fdd05f);
CAPNP_DECLARE_SCHEMA(b96f3ad9170cf085);
CAPNP_DECLARE_SCHEMA(96df70754d8390bc);
CAPNP_DECLARE_SCHEMA(8faa644732dec251);
CAPNP_DECLARE_SCHEMA(97ff69c53601abf1);
CAPNP_DECLARE_SCHEMA(94b7baa90c5c321e);
CAPNP_DECLARE_SCHEMA(b8aad62cffef28a9);
CAPNP_DECLARE_SCHEMA(8817eeea389e9f08);
CAPNP_DECLARE_SCHEMA(d1c9bef96d26fa91);
CAPNP_DECLARE_SCHEMA(a26e3710efd3e914);
CAPNP_DECLARE_SCHEMA(8fdfadb254ea867a);
CAPNP_DECLARE_SCHEMA(89d394e3541735fc);
CAPNP_DECLARE_SCHEMA(c0ad259ec157ccd3);
enum class Type_c0ad259ec157ccd3: uint16_t {
  BIG_BOX_LOSSLESS,
  FULL_H_E_V_C,
  BIG_BOX_H_E_V_C,
};
CAPNP_DECLARE_ENUM(Type, c0ad259ec157ccd3);
CAPNP_DECLARE_SCHEMA(ea095da1894f7d85);
CAPNP_DECLARE_SCHEMA(9811e1f38f62f2d1);
CAPNP_DECLARE_SCHEMA(d314cfd957229c11);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

static constexpr  ::int32_t LOG_VERSION = 1;
struct InitData {
  InitData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e71008caeb3fb65c, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct FrameData {
  FrameData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea0245f695ae0a33, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct GPSNMEAData {
  GPSNMEAData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d291d7813ba4a88, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData {
  SensorEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACCELERATION,
    MAGNETIC,
    ORIENTATION,
    GYRO,
  };
  struct SensorVec;
  typedef ::capnp::schemas::SensorSource_e49b3ce8f7f48d0d SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2b29a69d44529a1, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData::SensorVec {
  SensorVec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a43429bd2bfc24fc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct GpsLocationData {
  GpsLocationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e946524859add50e, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CanData {
  CanData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8785009a964c7c59, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ThermalData {
  ThermalData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8d8231a40b7fe6e0, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HealthData {
  HealthData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfa2b0c2c82af1e4, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LiveUI {
  LiveUI() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c08240f996aefced, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Live20Data {
  Live20Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LeadData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a185389d6fdd05f, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Live20Data::LeadData {
  LeadData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b96f3ad9170cf085, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LiveCalibrationData {
  LiveCalibrationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96df70754d8390bc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LiveTracks {
  LiveTracks() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8faa644732dec251, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Live100Data {
  Live100Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97ff69c53601abf1, 13, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LiveEventData {
  LiveEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94b7baa90c5c321e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ModelData {
  ModelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PathData;
  struct LeadData;
  struct ModelSettings;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8aad62cffef28a9, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::PathData {
  PathData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8817eeea389e9f08, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::LeadData {
  LeadData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1c9bef96d26fa91, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::ModelSettings {
  ModelSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a26e3710efd3e914, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CalibrationFeatures {
  CalibrationFeatures() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8fdfadb254ea867a, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EncodeIndex {
  EncodeIndex() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_c0ad259ec157ccd3 Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89d394e3541735fc, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct AndroidLogEntry {
  AndroidLogEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea095da1894f7d85, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LogRotate {
  LogRotate() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9811e1f38f62f2d1, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INIT_DATA,
    FRAME,
    GPS_N_M_E_A,
    SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D,
    CAN,
    THERMAL,
    LIVE100,
    LIVE_EVENT_D_E_P_R_E_C_A_T_E_D,
    MODEL,
    FEATURES,
    SENSOR_EVENTS,
    HEALTH,
    LIVE20,
    LIVE_U_I_D_E_P_R_E_C_A_T_E_D,
    ENCODE_IDX,
    LIVE_TRACKS,
    SENDCAN,
    LOG_MESSAGE,
    LIVE_CALIBRATION,
    ANDROID_LOG_ENTRY,
    GPS_LOCATION,
    CAR_STATE,
    CAR_CONTROL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d314cfd957229c11, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class InitData::Reader {
public:
  typedef InitData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getKernelArgs() const;

  inline bool hasGctx() const;
  inline  ::capnp::Text::Reader getGctx() const;

  inline bool hasDongleId() const;
  inline  ::capnp::Text::Reader getDongleId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::Builder {
public:
  typedef InitData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs();
  inline  ::capnp::List< ::capnp::Text>::Builder getKernelArgs();
  inline void setKernelArgs( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initKernelArgs(unsigned int size);
  inline void adoptKernelArgs(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownKernelArgs();

  inline bool hasGctx();
  inline  ::capnp::Text::Builder getGctx();
  inline void setGctx( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGctx(unsigned int size);
  inline void adoptGctx(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGctx();

  inline bool hasDongleId();
  inline  ::capnp::Text::Builder getDongleId();
  inline void setDongleId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDongleId(unsigned int size);
  inline void adoptDongleId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDongleId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::Pipeline {
public:
  typedef InitData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameData::Reader {
public:
  typedef FrameData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getEncodeId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline  ::int32_t getFrameLength() const;

  inline  ::int32_t getIntegLines() const;

  inline  ::int32_t getGlobalGain() const;

  inline bool hasImage() const;
  inline  ::capnp::Data::Reader getImage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameData::Builder {
public:
  typedef FrameData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getEncodeId();
  inline void setEncodeId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline  ::int32_t getFrameLength();
  inline void setFrameLength( ::int32_t value);

  inline  ::int32_t getIntegLines();
  inline void setIntegLines( ::int32_t value);

  inline  ::int32_t getGlobalGain();
  inline void setGlobalGain( ::int32_t value);

  inline bool hasImage();
  inline  ::capnp::Data::Builder getImage();
  inline void setImage( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initImage(unsigned int size);
  inline void adoptImage(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownImage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameData::Pipeline {
public:
  typedef FrameData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GPSNMEAData::Reader {
public:
  typedef GPSNMEAData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline  ::uint64_t getLocalWallTime() const;

  inline bool hasNmea() const;
  inline  ::capnp::Text::Reader getNmea() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GPSNMEAData::Builder {
public:
  typedef GPSNMEAData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::uint64_t getLocalWallTime();
  inline void setLocalWallTime( ::uint64_t value);

  inline bool hasNmea();
  inline  ::capnp::Text::Builder getNmea();
  inline void setNmea( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNmea(unsigned int size);
  inline void adoptNmea(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNmea();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GPSNMEAData::Pipeline {
public:
  typedef GPSNMEAData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::Reader {
public:
  typedef SensorEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::int32_t getVersion() const;

  inline  ::int32_t getSensor() const;

  inline  ::int32_t getType() const;

  inline  ::int64_t getTimestamp() const;

  inline bool isAcceleration() const;
  inline bool hasAcceleration() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getAcceleration() const;

  inline bool isMagnetic() const;
  inline bool hasMagnetic() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getMagnetic() const;

  inline bool isOrientation() const;
  inline bool hasOrientation() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getOrientation() const;

  inline bool isGyro() const;
  inline bool hasGyro() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getGyro() const;

  inline  ::cereal::SensorEventData::SensorSource getSource() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::Builder {
public:
  typedef SensorEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::int32_t getSensor();
  inline void setSensor( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool isAcceleration();
  inline bool hasAcceleration();
  inline  ::cereal::SensorEventData::SensorVec::Builder getAcceleration();
  inline void setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownAcceleration();

  inline bool isMagnetic();
  inline bool hasMagnetic();
  inline  ::cereal::SensorEventData::SensorVec::Builder getMagnetic();
  inline void setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initMagnetic();
  inline void adoptMagnetic(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownMagnetic();

  inline bool isOrientation();
  inline bool hasOrientation();
  inline  ::cereal::SensorEventData::SensorVec::Builder getOrientation();
  inline void setOrientation( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownOrientation();

  inline bool isGyro();
  inline bool hasGyro();
  inline  ::cereal::SensorEventData::SensorVec::Builder getGyro();
  inline void setGyro( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initGyro();
  inline void adoptGyro(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownGyro();

  inline  ::cereal::SensorEventData::SensorSource getSource();
  inline void setSource( ::cereal::SensorEventData::SensorSource value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::Pipeline {
public:
  typedef SensorEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::SensorVec::Reader {
public:
  typedef SensorVec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List<float>::Reader getV() const;

  inline  ::int8_t getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::SensorVec::Builder {
public:
  typedef SensorVec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List<float>::Builder getV();
  inline void setV( ::capnp::List<float>::Reader value);
  inline void setV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownV();

  inline  ::int8_t getStatus();
  inline void setStatus( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::SensorVec::Pipeline {
public:
  typedef SensorVec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GpsLocationData::Reader {
public:
  typedef GpsLocationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags() const;

  inline double getLatitude() const;

  inline double getLongitude() const;

  inline double getAltitude() const;

  inline float getSpeed() const;

  inline float getBearing() const;

  inline float getAccuracy() const;

  inline  ::int64_t getTimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GpsLocationData::Builder {
public:
  typedef GpsLocationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags();
  inline void setFlags( ::uint16_t value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getBearing();
  inline void setBearing(float value);

  inline float getAccuracy();
  inline void setAccuracy(float value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GpsLocationData::Pipeline {
public:
  typedef GpsLocationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CanData::Reader {
public:
  typedef CanData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress() const;

  inline  ::uint16_t getBusTime() const;

  inline bool hasDat() const;
  inline  ::capnp::Data::Reader getDat() const;

  inline  ::int8_t getSrc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CanData::Builder {
public:
  typedef CanData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint16_t getBusTime();
  inline void setBusTime( ::uint16_t value);

  inline bool hasDat();
  inline  ::capnp::Data::Builder getDat();
  inline void setDat( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDat(unsigned int size);
  inline void adoptDat(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDat();

  inline  ::int8_t getSrc();
  inline void setSrc( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CanData::Pipeline {
public:
  typedef CanData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ThermalData::Reader {
public:
  typedef ThermalData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCpu0() const;

  inline  ::uint16_t getCpu1() const;

  inline  ::uint16_t getCpu2() const;

  inline  ::uint16_t getCpu3() const;

  inline  ::uint16_t getMem() const;

  inline  ::uint16_t getGpu() const;

  inline  ::uint32_t getBat() const;

  inline float getFreeSpace() const;

  inline  ::int16_t getBatteryPercent() const;

  inline bool hasBatteryStatus() const;
  inline  ::capnp::Text::Reader getBatteryStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ThermalData::Builder {
public:
  typedef ThermalData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCpu0();
  inline void setCpu0( ::uint16_t value);

  inline  ::uint16_t getCpu1();
  inline void setCpu1( ::uint16_t value);

  inline  ::uint16_t getCpu2();
  inline void setCpu2( ::uint16_t value);

  inline  ::uint16_t getCpu3();
  inline void setCpu3( ::uint16_t value);

  inline  ::uint16_t getMem();
  inline void setMem( ::uint16_t value);

  inline  ::uint16_t getGpu();
  inline void setGpu( ::uint16_t value);

  inline  ::uint32_t getBat();
  inline void setBat( ::uint32_t value);

  inline float getFreeSpace();
  inline void setFreeSpace(float value);

  inline  ::int16_t getBatteryPercent();
  inline void setBatteryPercent( ::int16_t value);

  inline bool hasBatteryStatus();
  inline  ::capnp::Text::Builder getBatteryStatus();
  inline void setBatteryStatus( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBatteryStatus(unsigned int size);
  inline void adoptBatteryStatus(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBatteryStatus();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ThermalData::Pipeline {
public:
  typedef ThermalData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HealthData::Reader {
public:
  typedef HealthData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltage() const;

  inline  ::uint32_t getCurrent() const;

  inline bool getStarted() const;

  inline bool getControlsAllowed() const;

  inline bool getGasInterceptorDetected() const;

  inline bool getStartedSignalDetected() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HealthData::Builder {
public:
  typedef HealthData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltage();
  inline void setVoltage( ::uint32_t value);

  inline  ::uint32_t getCurrent();
  inline void setCurrent( ::uint32_t value);

  inline bool getStarted();
  inline void setStarted(bool value);

  inline bool getControlsAllowed();
  inline void setControlsAllowed(bool value);

  inline bool getGasInterceptorDetected();
  inline void setGasInterceptorDetected(bool value);

  inline bool getStartedSignalDetected();
  inline void setStartedSignalDetected(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HealthData::Pipeline {
public:
  typedef HealthData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveUI::Reader {
public:
  typedef LiveUI Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getRearViewCam() const;

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

  inline float getAwarenessStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveUI::Builder {
public:
  typedef LiveUI Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getRearViewCam();
  inline void setRearViewCam(bool value);

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveUI::Pipeline {
public:
  typedef LiveUI Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Live20Data::Reader {
public:
  typedef Live20Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED() const;
  inline  ::capnp::List<float>::Reader getWarpMatrixDEPRECATED() const;

  inline float getAngleOffsetDEPRECATED() const;

  inline  ::int8_t getCalStatusDEPRECATED() const;

  inline bool hasLeadOne() const;
  inline  ::cereal::Live20Data::LeadData::Reader getLeadOne() const;

  inline bool hasLeadTwo() const;
  inline  ::cereal::Live20Data::LeadData::Reader getLeadTwo() const;

  inline float getCumLagMs() const;

  inline  ::uint64_t getMdMonoTime() const;

  inline  ::uint64_t getFtMonoTime() const;

  inline  ::int32_t getCalCycleDEPRECATED() const;

  inline  ::int8_t getCalPercDEPRECATED() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Live20Data::Builder {
public:
  typedef Live20Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED();
  inline  ::capnp::List<float>::Builder getWarpMatrixDEPRECATED();
  inline void setWarpMatrixDEPRECATED( ::capnp::List<float>::Reader value);
  inline void setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initWarpMatrixDEPRECATED(unsigned int size);
  inline void adoptWarpMatrixDEPRECATED(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownWarpMatrixDEPRECATED();

  inline float getAngleOffsetDEPRECATED();
  inline void setAngleOffsetDEPRECATED(float value);

  inline  ::int8_t getCalStatusDEPRECATED();
  inline void setCalStatusDEPRECATED( ::int8_t value);

  inline bool hasLeadOne();
  inline  ::cereal::Live20Data::LeadData::Builder getLeadOne();
  inline void setLeadOne( ::cereal::Live20Data::LeadData::Reader value);
  inline  ::cereal::Live20Data::LeadData::Builder initLeadOne();
  inline void adoptLeadOne(::capnp::Orphan< ::cereal::Live20Data::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::Live20Data::LeadData> disownLeadOne();

  inline bool hasLeadTwo();
  inline  ::cereal::Live20Data::LeadData::Builder getLeadTwo();
  inline void setLeadTwo( ::cereal::Live20Data::LeadData::Reader value);
  inline  ::cereal::Live20Data::LeadData::Builder initLeadTwo();
  inline void adoptLeadTwo(::capnp::Orphan< ::cereal::Live20Data::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::Live20Data::LeadData> disownLeadTwo();

  inline float getCumLagMs();
  inline void setCumLagMs(float value);

  inline  ::uint64_t getMdMonoTime();
  inline void setMdMonoTime( ::uint64_t value);

  inline  ::uint64_t getFtMonoTime();
  inline void setFtMonoTime( ::uint64_t value);

  inline  ::int32_t getCalCycleDEPRECATED();
  inline void setCalCycleDEPRECATED( ::int32_t value);

  inline  ::int8_t getCalPercDEPRECATED();
  inline void setCalPercDEPRECATED( ::int8_t value);

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Live20Data::Pipeline {
public:
  typedef Live20Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::Live20Data::LeadData::Pipeline getLeadOne();
  inline  ::cereal::Live20Data::LeadData::Pipeline getLeadTwo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Live20Data::LeadData::Reader {
public:
  typedef LeadData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getVLead() const;

  inline float getALead() const;

  inline float getDPath() const;

  inline float getVLat() const;

  inline float getVLeadK() const;

  inline float getALeadK() const;

  inline bool getFcw() const;

  inline bool getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Live20Data::LeadData::Builder {
public:
  typedef LeadData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getVLead();
  inline void setVLead(float value);

  inline float getALead();
  inline void setALead(float value);

  inline float getDPath();
  inline void setDPath(float value);

  inline float getVLat();
  inline void setVLat(float value);

  inline float getVLeadK();
  inline void setVLeadK(float value);

  inline float getALeadK();
  inline void setALeadK(float value);

  inline bool getFcw();
  inline void setFcw(bool value);

  inline bool getStatus();
  inline void setStatus(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Live20Data::LeadData::Pipeline {
public:
  typedef LeadData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveCalibrationData::Reader {
public:
  typedef LiveCalibrationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrix() const;
  inline  ::capnp::List<float>::Reader getWarpMatrix() const;

  inline  ::int8_t getCalStatus() const;

  inline  ::int32_t getCalCycle() const;

  inline  ::int8_t getCalPerc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveCalibrationData::Builder {
public:
  typedef LiveCalibrationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrix();
  inline  ::capnp::List<float>::Builder getWarpMatrix();
  inline void setWarpMatrix( ::capnp::List<float>::Reader value);
  inline void setWarpMatrix(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initWarpMatrix(unsigned int size);
  inline void adoptWarpMatrix(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownWarpMatrix();

  inline  ::int8_t getCalStatus();
  inline void setCalStatus( ::int8_t value);

  inline  ::int32_t getCalCycle();
  inline void setCalCycle( ::int32_t value);

  inline  ::int8_t getCalPerc();
  inline void setCalPerc( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveCalibrationData::Pipeline {
public:
  typedef LiveCalibrationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveTracks::Reader {
public:
  typedef LiveTracks Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getTimeStamp() const;

  inline float getStatus() const;

  inline float getCurrentTime() const;

  inline bool getStationary() const;

  inline bool getOncoming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveTracks::Builder {
public:
  typedef LiveTracks Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getTimeStamp();
  inline void setTimeStamp(float value);

  inline float getStatus();
  inline void setStatus(float value);

  inline float getCurrentTime();
  inline void setCurrentTime(float value);

  inline bool getStationary();
  inline void setStationary(bool value);

  inline bool getOncoming();
  inline void setOncoming(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveTracks::Pipeline {
public:
  typedef LiveTracks Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Live100Data::Reader {
public:
  typedef Live100Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getVEgo() const;

  inline float getAEgoDEPRECATED() const;

  inline float getVPid() const;

  inline float getVTargetLead() const;

  inline float getUpAccelCmd() const;

  inline float getUiAccelCmd() const;

  inline float getYActual() const;

  inline float getYDes() const;

  inline float getUpSteer() const;

  inline float getUiSteer() const;

  inline float getATargetMin() const;

  inline float getATargetMax() const;

  inline float getJerkFactor() const;

  inline float getAngleSteers() const;

  inline  ::int32_t getHudLeadDEPRECATED() const;

  inline float getCumLagMs() const;

  inline  ::uint64_t getCanMonoTime() const;

  inline  ::uint64_t getL20MonoTime() const;

  inline  ::uint64_t getMdMonoTime() const;

  inline bool getEnabled() const;

  inline bool getSteerOverride() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

  inline float getVCruise() const;

  inline bool getRearViewCam() const;

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

  inline float getAwarenessStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Live100Data::Builder {
public:
  typedef Live100Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVEgo();
  inline void setVEgo(float value);

  inline float getAEgoDEPRECATED();
  inline void setAEgoDEPRECATED(float value);

  inline float getVPid();
  inline void setVPid(float value);

  inline float getVTargetLead();
  inline void setVTargetLead(float value);

  inline float getUpAccelCmd();
  inline void setUpAccelCmd(float value);

  inline float getUiAccelCmd();
  inline void setUiAccelCmd(float value);

  inline float getYActual();
  inline void setYActual(float value);

  inline float getYDes();
  inline void setYDes(float value);

  inline float getUpSteer();
  inline void setUpSteer(float value);

  inline float getUiSteer();
  inline void setUiSteer(float value);

  inline float getATargetMin();
  inline void setATargetMin(float value);

  inline float getATargetMax();
  inline void setATargetMax(float value);

  inline float getJerkFactor();
  inline void setJerkFactor(float value);

  inline float getAngleSteers();
  inline void setAngleSteers(float value);

  inline  ::int32_t getHudLeadDEPRECATED();
  inline void setHudLeadDEPRECATED( ::int32_t value);

  inline float getCumLagMs();
  inline void setCumLagMs(float value);

  inline  ::uint64_t getCanMonoTime();
  inline void setCanMonoTime( ::uint64_t value);

  inline  ::uint64_t getL20MonoTime();
  inline void setL20MonoTime( ::uint64_t value);

  inline  ::uint64_t getMdMonoTime();
  inline void setMdMonoTime( ::uint64_t value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool getSteerOverride();
  inline void setSteerOverride(bool value);

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

  inline float getVCruise();
  inline void setVCruise(float value);

  inline bool getRearViewCam();
  inline void setRearViewCam(bool value);

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Live100Data::Pipeline {
public:
  typedef Live100Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveEventData::Reader {
public:
  typedef LiveEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int32_t getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveEventData::Builder {
public:
  typedef LiveEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int32_t getValue();
  inline void setValue( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveEventData::Pipeline {
public:
  typedef LiveEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::Reader {
public:
  typedef ModelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasPath() const;
  inline  ::cereal::ModelData::PathData::Reader getPath() const;

  inline bool hasLeftLane() const;
  inline  ::cereal::ModelData::PathData::Reader getLeftLane() const;

  inline bool hasRightLane() const;
  inline  ::cereal::ModelData::PathData::Reader getRightLane() const;

  inline bool hasLead() const;
  inline  ::cereal::ModelData::LeadData::Reader getLead() const;

  inline bool hasSettings() const;
  inline  ::cereal::ModelData::ModelSettings::Reader getSettings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::Builder {
public:
  typedef ModelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasPath();
  inline  ::cereal::ModelData::PathData::Builder getPath();
  inline void setPath( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownPath();

  inline bool hasLeftLane();
  inline  ::cereal::ModelData::PathData::Builder getLeftLane();
  inline void setLeftLane( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initLeftLane();
  inline void adoptLeftLane(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownLeftLane();

  inline bool hasRightLane();
  inline  ::cereal::ModelData::PathData::Builder getRightLane();
  inline void setRightLane( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initRightLane();
  inline void adoptRightLane(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownRightLane();

  inline bool hasLead();
  inline  ::cereal::ModelData::LeadData::Builder getLead();
  inline void setLead( ::cereal::ModelData::LeadData::Reader value);
  inline  ::cereal::ModelData::LeadData::Builder initLead();
  inline void adoptLead(::capnp::Orphan< ::cereal::ModelData::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::LeadData> disownLead();

  inline bool hasSettings();
  inline  ::cereal::ModelData::ModelSettings::Builder getSettings();
  inline void setSettings( ::cereal::ModelData::ModelSettings::Reader value);
  inline  ::cereal::ModelData::ModelSettings::Builder initSettings();
  inline void adoptSettings(::capnp::Orphan< ::cereal::ModelData::ModelSettings>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::ModelSettings> disownSettings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::Pipeline {
public:
  typedef ModelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelData::PathData::Pipeline getPath();
  inline  ::cereal::ModelData::PathData::Pipeline getLeftLane();
  inline  ::cereal::ModelData::PathData::Pipeline getRightLane();
  inline  ::cereal::ModelData::LeadData::Pipeline getLead();
  inline  ::cereal::ModelData::ModelSettings::Pipeline getSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::PathData::Reader {
public:
  typedef PathData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPoints() const;
  inline  ::capnp::List<float>::Reader getPoints() const;

  inline float getProb() const;

  inline float getStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::PathData::Builder {
public:
  typedef PathData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPoints();
  inline  ::capnp::List<float>::Builder getPoints();
  inline void setPoints( ::capnp::List<float>::Reader value);
  inline void setPoints(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPoints();

  inline float getProb();
  inline void setProb(float value);

  inline float getStd();
  inline void setStd(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::PathData::Pipeline {
public:
  typedef PathData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::LeadData::Reader {
public:
  typedef LeadData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getDist() const;

  inline float getProb() const;

  inline float getStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::LeadData::Builder {
public:
  typedef LeadData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDist();
  inline void setDist(float value);

  inline float getProb();
  inline void setProb(float value);

  inline float getStd();
  inline void setStd(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::LeadData::Pipeline {
public:
  typedef LeadData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::ModelSettings::Reader {
public:
  typedef ModelSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBigBoxX() const;

  inline  ::uint16_t getBigBoxY() const;

  inline  ::uint16_t getBigBoxWidth() const;

  inline  ::uint16_t getBigBoxHeight() const;

  inline bool hasBoxProjection() const;
  inline  ::capnp::List<float>::Reader getBoxProjection() const;

  inline bool hasYuvCorrection() const;
  inline  ::capnp::List<float>::Reader getYuvCorrection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::ModelSettings::Builder {
public:
  typedef ModelSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBigBoxX();
  inline void setBigBoxX( ::uint16_t value);

  inline  ::uint16_t getBigBoxY();
  inline void setBigBoxY( ::uint16_t value);

  inline  ::uint16_t getBigBoxWidth();
  inline void setBigBoxWidth( ::uint16_t value);

  inline  ::uint16_t getBigBoxHeight();
  inline void setBigBoxHeight( ::uint16_t value);

  inline bool hasBoxProjection();
  inline  ::capnp::List<float>::Builder getBoxProjection();
  inline void setBoxProjection( ::capnp::List<float>::Reader value);
  inline void setBoxProjection(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initBoxProjection(unsigned int size);
  inline void adoptBoxProjection(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownBoxProjection();

  inline bool hasYuvCorrection();
  inline  ::capnp::List<float>::Builder getYuvCorrection();
  inline void setYuvCorrection( ::capnp::List<float>::Reader value);
  inline void setYuvCorrection(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initYuvCorrection(unsigned int size);
  inline void adoptYuvCorrection(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownYuvCorrection();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::ModelSettings::Pipeline {
public:
  typedef ModelSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CalibrationFeatures::Reader {
public:
  typedef CalibrationFeatures Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasP0() const;
  inline  ::capnp::List<float>::Reader getP0() const;

  inline bool hasP1() const;
  inline  ::capnp::List<float>::Reader getP1() const;

  inline bool hasStatus() const;
  inline  ::capnp::List< ::int8_t>::Reader getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CalibrationFeatures::Builder {
public:
  typedef CalibrationFeatures Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasP0();
  inline  ::capnp::List<float>::Builder getP0();
  inline void setP0( ::capnp::List<float>::Reader value);
  inline void setP0(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initP0(unsigned int size);
  inline void adoptP0(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownP0();

  inline bool hasP1();
  inline  ::capnp::List<float>::Builder getP1();
  inline void setP1( ::capnp::List<float>::Reader value);
  inline void setP1(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initP1(unsigned int size);
  inline void adoptP1(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownP1();

  inline bool hasStatus();
  inline  ::capnp::List< ::int8_t>::Builder getStatus();
  inline void setStatus( ::capnp::List< ::int8_t>::Reader value);
  inline void setStatus(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownStatus();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CalibrationFeatures::Pipeline {
public:
  typedef CalibrationFeatures Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EncodeIndex::Reader {
public:
  typedef EncodeIndex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::cereal::EncodeIndex::Type getType() const;

  inline  ::uint32_t getEncodeId() const;

  inline  ::int32_t getSegmentNum() const;

  inline  ::uint32_t getSegmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EncodeIndex::Builder {
public:
  typedef EncodeIndex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::cereal::EncodeIndex::Type getType();
  inline void setType( ::cereal::EncodeIndex::Type value);

  inline  ::uint32_t getEncodeId();
  inline void setEncodeId( ::uint32_t value);

  inline  ::int32_t getSegmentNum();
  inline void setSegmentNum( ::int32_t value);

  inline  ::uint32_t getSegmentId();
  inline void setSegmentId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EncodeIndex::Pipeline {
public:
  typedef EncodeIndex Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidLogEntry::Reader {
public:
  typedef AndroidLogEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId() const;

  inline  ::uint64_t getTs() const;

  inline  ::uint8_t getPriority() const;

  inline  ::int32_t getPid() const;

  inline  ::int32_t getTid() const;

  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidLogEntry::Builder {
public:
  typedef AndroidLogEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId();
  inline void setId( ::uint8_t value);

  inline  ::uint64_t getTs();
  inline void setTs( ::uint64_t value);

  inline  ::uint8_t getPriority();
  inline void setPriority( ::uint8_t value);

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline  ::int32_t getTid();
  inline void setTid( ::int32_t value);

  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidLogEntry::Pipeline {
public:
  typedef AndroidLogEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LogRotate::Reader {
public:
  typedef LogRotate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSegmentNum() const;

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LogRotate::Builder {
public:
  typedef LogRotate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSegmentNum();
  inline void setSegmentNum( ::int32_t value);

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LogRotate::Pipeline {
public:
  typedef LogRotate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getLogMonoTime() const;

  inline bool isInitData() const;
  inline bool hasInitData() const;
  inline  ::cereal::InitData::Reader getInitData() const;

  inline bool isFrame() const;
  inline bool hasFrame() const;
  inline  ::cereal::FrameData::Reader getFrame() const;

  inline bool isGpsNMEA() const;
  inline bool hasGpsNMEA() const;
  inline  ::cereal::GPSNMEAData::Reader getGpsNMEA() const;

  inline bool isSensorEventDEPRECATED() const;
  inline bool hasSensorEventDEPRECATED() const;
  inline  ::cereal::SensorEventData::Reader getSensorEventDEPRECATED() const;

  inline bool isCan() const;
  inline bool hasCan() const;
  inline  ::capnp::List< ::cereal::CanData>::Reader getCan() const;

  inline bool isThermal() const;
  inline bool hasThermal() const;
  inline  ::cereal::ThermalData::Reader getThermal() const;

  inline bool isLive100() const;
  inline bool hasLive100() const;
  inline  ::cereal::Live100Data::Reader getLive100() const;

  inline bool isLiveEventDEPRECATED() const;
  inline bool hasLiveEventDEPRECATED() const;
  inline  ::capnp::List< ::cereal::LiveEventData>::Reader getLiveEventDEPRECATED() const;

  inline bool isModel() const;
  inline bool hasModel() const;
  inline  ::cereal::ModelData::Reader getModel() const;

  inline bool isFeatures() const;
  inline bool hasFeatures() const;
  inline  ::cereal::CalibrationFeatures::Reader getFeatures() const;

  inline bool isSensorEvents() const;
  inline bool hasSensorEvents() const;
  inline  ::capnp::List< ::cereal::SensorEventData>::Reader getSensorEvents() const;

  inline bool isHealth() const;
  inline bool hasHealth() const;
  inline  ::cereal::HealthData::Reader getHealth() const;

  inline bool isLive20() const;
  inline bool hasLive20() const;
  inline  ::cereal::Live20Data::Reader getLive20() const;

  inline bool isLiveUIDEPRECATED() const;
  inline bool hasLiveUIDEPRECATED() const;
  inline  ::cereal::LiveUI::Reader getLiveUIDEPRECATED() const;

  inline bool isEncodeIdx() const;
  inline bool hasEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getEncodeIdx() const;

  inline bool isLiveTracks() const;
  inline bool hasLiveTracks() const;
  inline  ::capnp::List< ::cereal::LiveTracks>::Reader getLiveTracks() const;

  inline bool isSendcan() const;
  inline bool hasSendcan() const;
  inline  ::capnp::List< ::cereal::CanData>::Reader getSendcan() const;

  inline bool isLogMessage() const;
  inline bool hasLogMessage() const;
  inline  ::capnp::Text::Reader getLogMessage() const;

  inline bool isLiveCalibration() const;
  inline bool hasLiveCalibration() const;
  inline  ::cereal::LiveCalibrationData::Reader getLiveCalibration() const;

  inline bool isAndroidLogEntry() const;
  inline bool hasAndroidLogEntry() const;
  inline  ::cereal::AndroidLogEntry::Reader getAndroidLogEntry() const;

  inline bool isGpsLocation() const;
  inline bool hasGpsLocation() const;
  inline  ::cereal::GpsLocationData::Reader getGpsLocation() const;

  inline bool isCarState() const;
  inline bool hasCarState() const;
  inline  ::cereal::CarState::Reader getCarState() const;

  inline bool isCarControl() const;
  inline bool hasCarControl() const;
  inline  ::cereal::CarControl::Reader getCarControl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getLogMonoTime();
  inline void setLogMonoTime( ::uint64_t value);

  inline bool isInitData();
  inline bool hasInitData();
  inline  ::cereal::InitData::Builder getInitData();
  inline void setInitData( ::cereal::InitData::Reader value);
  inline  ::cereal::InitData::Builder initInitData();
  inline void adoptInitData(::capnp::Orphan< ::cereal::InitData>&& value);
  inline ::capnp::Orphan< ::cereal::InitData> disownInitData();

  inline bool isFrame();
  inline bool hasFrame();
  inline  ::cereal::FrameData::Builder getFrame();
  inline void setFrame( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initFrame();
  inline void adoptFrame(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownFrame();

  inline bool isGpsNMEA();
  inline bool hasGpsNMEA();
  inline  ::cereal::GPSNMEAData::Builder getGpsNMEA();
  inline void setGpsNMEA( ::cereal::GPSNMEAData::Reader value);
  inline  ::cereal::GPSNMEAData::Builder initGpsNMEA();
  inline void adoptGpsNMEA(::capnp::Orphan< ::cereal::GPSNMEAData>&& value);
  inline ::capnp::Orphan< ::cereal::GPSNMEAData> disownGpsNMEA();

  inline bool isSensorEventDEPRECATED();
  inline bool hasSensorEventDEPRECATED();
  inline  ::cereal::SensorEventData::Builder getSensorEventDEPRECATED();
  inline void setSensorEventDEPRECATED( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initSensorEventDEPRECATED();
  inline void adoptSensorEventDEPRECATED(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownSensorEventDEPRECATED();

  inline bool isCan();
  inline bool hasCan();
  inline  ::capnp::List< ::cereal::CanData>::Builder getCan();
  inline void setCan( ::capnp::List< ::cereal::CanData>::Reader value);
  inline  ::capnp::List< ::cereal::CanData>::Builder initCan(unsigned int size);
  inline void adoptCan(::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> disownCan();

  inline bool isThermal();
  inline bool hasThermal();
  inline  ::cereal::ThermalData::Builder getThermal();
  inline void setThermal( ::cereal::ThermalData::Reader value);
  inline  ::cereal::ThermalData::Builder initThermal();
  inline void adoptThermal(::capnp::Orphan< ::cereal::ThermalData>&& value);
  inline ::capnp::Orphan< ::cereal::ThermalData> disownThermal();

  inline bool isLive100();
  inline bool hasLive100();
  inline  ::cereal::Live100Data::Builder getLive100();
  inline void setLive100( ::cereal::Live100Data::Reader value);
  inline  ::cereal::Live100Data::Builder initLive100();
  inline void adoptLive100(::capnp::Orphan< ::cereal::Live100Data>&& value);
  inline ::capnp::Orphan< ::cereal::Live100Data> disownLive100();

  inline bool isLiveEventDEPRECATED();
  inline bool hasLiveEventDEPRECATED();
  inline  ::capnp::List< ::cereal::LiveEventData>::Builder getLiveEventDEPRECATED();
  inline void setLiveEventDEPRECATED( ::capnp::List< ::cereal::LiveEventData>::Reader value);
  inline  ::capnp::List< ::cereal::LiveEventData>::Builder initLiveEventDEPRECATED(unsigned int size);
  inline void adoptLiveEventDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>> disownLiveEventDEPRECATED();

  inline bool isModel();
  inline bool hasModel();
  inline  ::cereal::ModelData::Builder getModel();
  inline void setModel( ::cereal::ModelData::Reader value);
  inline  ::cereal::ModelData::Builder initModel();
  inline void adoptModel(::capnp::Orphan< ::cereal::ModelData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData> disownModel();

  inline bool isFeatures();
  inline bool hasFeatures();
  inline  ::cereal::CalibrationFeatures::Builder getFeatures();
  inline void setFeatures( ::cereal::CalibrationFeatures::Reader value);
  inline  ::cereal::CalibrationFeatures::Builder initFeatures();
  inline void adoptFeatures(::capnp::Orphan< ::cereal::CalibrationFeatures>&& value);
  inline ::capnp::Orphan< ::cereal::CalibrationFeatures> disownFeatures();

  inline bool isSensorEvents();
  inline bool hasSensorEvents();
  inline  ::capnp::List< ::cereal::SensorEventData>::Builder getSensorEvents();
  inline void setSensorEvents( ::capnp::List< ::cereal::SensorEventData>::Reader value);
  inline  ::capnp::List< ::cereal::SensorEventData>::Builder initSensorEvents(unsigned int size);
  inline void adoptSensorEvents(::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>> disownSensorEvents();

  inline bool isHealth();
  inline bool hasHealth();
  inline  ::cereal::HealthData::Builder getHealth();
  inline void setHealth( ::cereal::HealthData::Reader value);
  inline  ::cereal::HealthData::Builder initHealth();
  inline void adoptHealth(::capnp::Orphan< ::cereal::HealthData>&& value);
  inline ::capnp::Orphan< ::cereal::HealthData> disownHealth();

  inline bool isLive20();
  inline bool hasLive20();
  inline  ::cereal::Live20Data::Builder getLive20();
  inline void setLive20( ::cereal::Live20Data::Reader value);
  inline  ::cereal::Live20Data::Builder initLive20();
  inline void adoptLive20(::capnp::Orphan< ::cereal::Live20Data>&& value);
  inline ::capnp::Orphan< ::cereal::Live20Data> disownLive20();

  inline bool isLiveUIDEPRECATED();
  inline bool hasLiveUIDEPRECATED();
  inline  ::cereal::LiveUI::Builder getLiveUIDEPRECATED();
  inline void setLiveUIDEPRECATED( ::cereal::LiveUI::Reader value);
  inline  ::cereal::LiveUI::Builder initLiveUIDEPRECATED();
  inline void adoptLiveUIDEPRECATED(::capnp::Orphan< ::cereal::LiveUI>&& value);
  inline ::capnp::Orphan< ::cereal::LiveUI> disownLiveUIDEPRECATED();

  inline bool isEncodeIdx();
  inline bool hasEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getEncodeIdx();
  inline void setEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initEncodeIdx();
  inline void adoptEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownEncodeIdx();

  inline bool isLiveTracks();
  inline bool hasLiveTracks();
  inline  ::capnp::List< ::cereal::LiveTracks>::Builder getLiveTracks();
  inline void setLiveTracks( ::capnp::List< ::cereal::LiveTracks>::Reader value);
  inline  ::capnp::List< ::cereal::LiveTracks>::Builder initLiveTracks(unsigned int size);
  inline void adoptLiveTracks(::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>> disownLiveTracks();

  inline bool isSendcan();
  inline bool hasSendcan();
  inline  ::capnp::List< ::cereal::CanData>::Builder getSendcan();
  inline void setSendcan( ::capnp::List< ::cereal::CanData>::Reader value);
  inline  ::capnp::List< ::cereal::CanData>::Builder initSendcan(unsigned int size);
  inline void adoptSendcan(::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> disownSendcan();

  inline bool isLogMessage();
  inline bool hasLogMessage();
  inline  ::capnp::Text::Builder getLogMessage();
  inline void setLogMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLogMessage(unsigned int size);
  inline void adoptLogMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLogMessage();

  inline bool isLiveCalibration();
  inline bool hasLiveCalibration();
  inline  ::cereal::LiveCalibrationData::Builder getLiveCalibration();
  inline void setLiveCalibration( ::cereal::LiveCalibrationData::Reader value);
  inline  ::cereal::LiveCalibrationData::Builder initLiveCalibration();
  inline void adoptLiveCalibration(::capnp::Orphan< ::cereal::LiveCalibrationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveCalibrationData> disownLiveCalibration();

  inline bool isAndroidLogEntry();
  inline bool hasAndroidLogEntry();
  inline  ::cereal::AndroidLogEntry::Builder getAndroidLogEntry();
  inline void setAndroidLogEntry( ::cereal::AndroidLogEntry::Reader value);
  inline  ::cereal::AndroidLogEntry::Builder initAndroidLogEntry();
  inline void adoptAndroidLogEntry(::capnp::Orphan< ::cereal::AndroidLogEntry>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidLogEntry> disownAndroidLogEntry();

  inline bool isGpsLocation();
  inline bool hasGpsLocation();
  inline  ::cereal::GpsLocationData::Builder getGpsLocation();
  inline void setGpsLocation( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initGpsLocation();
  inline void adoptGpsLocation(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownGpsLocation();

  inline bool isCarState();
  inline bool hasCarState();
  inline  ::cereal::CarState::Builder getCarState();
  inline void setCarState( ::cereal::CarState::Reader value);
  inline  ::cereal::CarState::Builder initCarState();
  inline void adoptCarState(::capnp::Orphan< ::cereal::CarState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState> disownCarState();

  inline bool isCarControl();
  inline bool hasCarControl();
  inline  ::cereal::CarControl::Builder getCarControl();
  inline void setCarControl( ::cereal::CarControl::Reader value);
  inline  ::cereal::CarControl::Builder initCarControl();
  inline void adoptCarControl(::capnp::Orphan< ::cereal::CarControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl> disownCarControl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool InitData::Reader::hasKernelArgs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasKernelArgs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader InitData::Reader::getKernelArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder InitData::Builder::getKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void InitData::Builder::setKernelArgs( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void InitData::Builder::setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder InitData::Builder::initKernelArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptKernelArgs(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> InitData::Builder::disownKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGctx() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGctx() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGctx() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGctx() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void InitData::Builder::setGctx( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGctx(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGctx(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGctx() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasDongleId() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasDongleId() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getDongleId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void InitData::Builder::setDongleId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initDongleId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptDongleId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint32_t FrameData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FrameData::Reader::getEncodeId() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getEncodeId() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setEncodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getFrameLength() const {
  return _reader.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getFrameLength() {
  return _builder.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameLength( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getIntegLines() const {
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getIntegLines() {
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setIntegLines( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getGlobalGain() const {
  return _reader.getDataField< ::int32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getGlobalGain() {
  return _builder.getDataField< ::int32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setGlobalGain( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasImage() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasImage() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader FrameData::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder FrameData::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FrameData::Builder::setImage( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder FrameData::Builder::initImage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptImage(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> FrameData::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t GPSNMEAData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t GPSNMEAData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void GPSNMEAData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GPSNMEAData::Reader::getLocalWallTime() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t GPSNMEAData::Builder::getLocalWallTime() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void GPSNMEAData::Builder::setLocalWallTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool GPSNMEAData::Reader::hasNmea() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool GPSNMEAData::Builder::hasNmea() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GPSNMEAData::Reader::getNmea() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GPSNMEAData::Builder::getNmea() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void GPSNMEAData::Builder::setNmea( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GPSNMEAData::Builder::initNmea(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void GPSNMEAData::Builder::adoptNmea(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GPSNMEAData::Builder::disownNmea() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::Which SensorEventData::Reader::which() const {
  return _reader.getDataField<Which>(6 * ::capnp::ELEMENTS);
}
inline  ::cereal::SensorEventData::Which SensorEventData::Builder::which() {
  return _builder.getDataField<Which>(6 * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getSensor() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getSensor() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSensor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t SensorEventData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int64_t SensorEventData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isAcceleration() const {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Builder::isAcceleration() {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Reader::hasAcceleration() const {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasAcceleration() {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getAcceleration() const {
  KJ_IREQUIRE(which() == SensorEventData::ACCELERATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getAcceleration() {
  KJ_IREQUIRE(which() == SensorEventData::ACCELERATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initAcceleration() {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptAcceleration(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownAcceleration() {
  KJ_IREQUIRE(which() == SensorEventData::ACCELERATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isMagnetic() const {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Builder::isMagnetic() {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Reader::hasMagnetic() const {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasMagnetic() {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getMagnetic() const {
  KJ_IREQUIRE(which() == SensorEventData::MAGNETIC,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getMagnetic() {
  KJ_IREQUIRE(which() == SensorEventData::MAGNETIC,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initMagnetic() {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptMagnetic(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownMagnetic() {
  KJ_IREQUIRE(which() == SensorEventData::MAGNETIC,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isOrientation() const {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Builder::isOrientation() {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Reader::hasOrientation() const {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasOrientation() {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getOrientation() const {
  KJ_IREQUIRE(which() == SensorEventData::ORIENTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getOrientation() {
  KJ_IREQUIRE(which() == SensorEventData::ORIENTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setOrientation( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initOrientation() {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptOrientation(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownOrientation() {
  KJ_IREQUIRE(which() == SensorEventData::ORIENTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isGyro() const {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Builder::isGyro() {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Reader::hasGyro() const {
  if (which() != SensorEventData::GYRO) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasGyro() {
  if (which() != SensorEventData::GYRO) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getGyro() const {
  KJ_IREQUIRE(which() == SensorEventData::GYRO,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getGyro() {
  KJ_IREQUIRE(which() == SensorEventData::GYRO,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setGyro( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initGyro() {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::GYRO);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptGyro(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      6 * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownGyro() {
  KJ_IREQUIRE(which() == SensorEventData::GYRO,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::SensorEventData::SensorSource>(
      7 * ::capnp::ELEMENTS);
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Builder::getSource() {
  return _builder.getDataField< ::cereal::SensorEventData::SensorSource>(
      7 * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSource( ::cereal::SensorEventData::SensorSource value) {
  _builder.setDataField< ::cereal::SensorEventData::SensorSource>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::SensorVec::Reader::hasV() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::SensorVec::Builder::hasV() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader SensorEventData::SensorVec::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder SensorEventData::SensorVec::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SensorEventData::SensorVec::Builder::setV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void SensorEventData::SensorVec::Builder::setV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder SensorEventData::SensorVec::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SensorEventData::SensorVec::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> SensorEventData::SensorVec::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int8_t SensorEventData::SensorVec::Reader::getStatus() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t SensorEventData::SensorVec::Builder::getStatus() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SensorEventData::SensorVec::Builder::setStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t GpsLocationData::Reader::getFlags() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t GpsLocationData::Builder::getFlags() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setFlags( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLatitude() {
  return _builder.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      1 * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLongitude() {
  return _builder.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      2 * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      3 * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getAltitude() {
  return _builder.getDataField<double>(
      3 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      3 * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getSpeed() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getBearing() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getBearing() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setBearing(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getAccuracy() const {
  return _reader.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getAccuracy() {
  return _builder.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setAccuracy(float value) {
  _builder.setDataField<float>(
      9 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t GpsLocationData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int64_t GpsLocationData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CanData::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CanData::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t CanData::Reader::getBusTime() const {
  return _reader.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint16_t CanData::Builder::getBusTime() {
  return _builder.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setBusTime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool CanData::Reader::hasDat() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CanData::Builder::hasDat() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CanData::Reader::getDat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CanData::Builder::getDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CanData::Builder::setDat( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CanData::Builder::initDat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void CanData::Builder::adoptDat(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CanData::Builder::disownDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int8_t CanData::Reader::getSrc() const {
  return _reader.getDataField< ::int8_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int8_t CanData::Builder::getSrc() {
  return _builder.getDataField< ::int8_t>(
      6 * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setSrc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu0() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu0() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu0( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu1() const {
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu1() {
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu2() const {
  return _reader.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu2() {
  return _builder.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu3() const {
  return _reader.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu3() {
  return _builder.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu3( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getMem() const {
  return _reader.getDataField< ::uint16_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getMem() {
  return _builder.getDataField< ::uint16_t>(
      4 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setMem( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getGpu() const {
  return _reader.getDataField< ::uint16_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getGpu() {
  return _builder.getDataField< ::uint16_t>(
      5 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setGpu( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ThermalData::Reader::getBat() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t ThermalData::Builder::getBat() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setBat( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline float ThermalData::Reader::getFreeSpace() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float ThermalData::Builder::getFreeSpace() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setFreeSpace(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::int16_t ThermalData::Reader::getBatteryPercent() const {
  return _reader.getDataField< ::int16_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::int16_t ThermalData::Builder::getBatteryPercent() {
  return _builder.getDataField< ::int16_t>(
      10 * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setBatteryPercent( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline bool ThermalData::Reader::hasBatteryStatus() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ThermalData::Builder::hasBatteryStatus() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ThermalData::Reader::getBatteryStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ThermalData::Builder::getBatteryStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ThermalData::Builder::setBatteryStatus( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ThermalData::Builder::initBatteryStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ThermalData::Builder::adoptBatteryStatus(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ThermalData::Builder::disownBatteryStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t HealthData::Reader::getVoltage() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getVoltage() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setVoltage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t HealthData::Reader::getCurrent() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getCurrent() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setCurrent( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getStarted() const {
  return _reader.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getStarted() {
  return _builder.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setStarted(bool value) {
  _builder.setDataField<bool>(
      64 * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getControlsAllowed() const {
  return _reader.getDataField<bool>(
      65 * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getControlsAllowed() {
  return _builder.getDataField<bool>(
      65 * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setControlsAllowed(bool value) {
  _builder.setDataField<bool>(
      65 * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getGasInterceptorDetected() const {
  return _reader.getDataField<bool>(
      66 * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getGasInterceptorDetected() {
  return _builder.getDataField<bool>(
      66 * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setGasInterceptorDetected(bool value) {
  _builder.setDataField<bool>(
      66 * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getStartedSignalDetected() const {
  return _reader.getDataField<bool>(
      67 * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getStartedSignalDetected() {
  return _builder.getDataField<bool>(
      67 * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setStartedSignalDetected(bool value) {
  _builder.setDataField<bool>(
      67 * ::capnp::ELEMENTS, value);
}

inline bool LiveUI::Reader::getRearViewCam() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool LiveUI::Builder::getRearViewCam() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void LiveUI::Builder::setRearViewCam(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool LiveUI::Reader::hasAlertText1() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool LiveUI::Builder::hasAlertText1() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveUI::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveUI::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void LiveUI::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveUI::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void LiveUI::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveUI::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool LiveUI::Reader::hasAlertText2() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool LiveUI::Builder::hasAlertText2() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveUI::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveUI::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void LiveUI::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveUI::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void LiveUI::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveUI::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline float LiveUI::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float LiveUI::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void LiveUI::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Live20Data::Reader::hasWarpMatrixDEPRECATED() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Live20Data::Builder::hasWarpMatrixDEPRECATED() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader Live20Data::Reader::getWarpMatrixDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder Live20Data::Builder::getWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Live20Data::Builder::setWarpMatrixDEPRECATED( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Live20Data::Builder::setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder Live20Data::Builder::initWarpMatrixDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Live20Data::Builder::adoptWarpMatrixDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> Live20Data::Builder::disownWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline float Live20Data::Reader::getAngleOffsetDEPRECATED() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Live20Data::Builder::getAngleOffsetDEPRECATED() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Live20Data::Builder::setAngleOffsetDEPRECATED(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Live20Data::Reader::getCalStatusDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int8_t Live20Data::Builder::getCalStatusDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Live20Data::Builder::setCalStatusDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Live20Data::Reader::hasLeadOne() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Live20Data::Builder::hasLeadOne() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Live20Data::LeadData::Reader Live20Data::Reader::getLeadOne() const {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::cereal::Live20Data::LeadData::Builder Live20Data::Builder::getLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Live20Data::LeadData::Pipeline Live20Data::Pipeline::getLeadOne() {
  return  ::cereal::Live20Data::LeadData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Live20Data::Builder::setLeadOne( ::cereal::Live20Data::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::cereal::Live20Data::LeadData::Builder Live20Data::Builder::initLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Live20Data::Builder::adoptLeadOne(
    ::capnp::Orphan< ::cereal::Live20Data::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Live20Data::LeadData> Live20Data::Builder::disownLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Live20Data::Reader::hasLeadTwo() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Live20Data::Builder::hasLeadTwo() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Live20Data::LeadData::Reader Live20Data::Reader::getLeadTwo() const {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::cereal::Live20Data::LeadData::Builder Live20Data::Builder::getLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Live20Data::LeadData::Pipeline Live20Data::Pipeline::getLeadTwo() {
  return  ::cereal::Live20Data::LeadData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Live20Data::Builder::setLeadTwo( ::cereal::Live20Data::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::cereal::Live20Data::LeadData::Builder Live20Data::Builder::initLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Live20Data::Builder::adoptLeadTwo(
    ::capnp::Orphan< ::cereal::Live20Data::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Live20Data::LeadData> Live20Data::Builder::disownLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data::LeadData>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline float Live20Data::Reader::getCumLagMs() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Live20Data::Builder::getCumLagMs() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Live20Data::Builder::setCumLagMs(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Live20Data::Reader::getMdMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Live20Data::Builder::getMdMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Live20Data::Builder::setMdMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Live20Data::Reader::getFtMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Live20Data::Builder::getFtMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Live20Data::Builder::setFtMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Live20Data::Reader::getCalCycleDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t Live20Data::Builder::getCalCycleDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Live20Data::Builder::setCalCycleDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Live20Data::Reader::getCalPercDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int8_t Live20Data::Builder::getCalPercDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Live20Data::Builder::setCalPercDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool Live20Data::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Live20Data::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Live20Data::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Live20Data::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Live20Data::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Live20Data::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Live20Data::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Live20Data::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Live20Data::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline float Live20Data::LeadData::Reader::getDRel() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getDRel() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getYRel() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getYRel() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getVRel() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getVRel() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getARel() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getARel() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setARel(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getVLead() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getVLead() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setVLead(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getALead() const {
  return _reader.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getALead() {
  return _builder.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setALead(float value) {
  _builder.setDataField<float>(
      5 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getDPath() const {
  return _reader.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getDPath() {
  return _builder.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setDPath(float value) {
  _builder.setDataField<float>(
      6 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getVLat() const {
  return _reader.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getVLat() {
  return _builder.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setVLat(float value) {
  _builder.setDataField<float>(
      7 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getVLeadK() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getVLeadK() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setVLeadK(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value);
}

inline float Live20Data::LeadData::Reader::getALeadK() const {
  return _reader.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}

inline float Live20Data::LeadData::Builder::getALeadK() {
  return _builder.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setALeadK(float value) {
  _builder.setDataField<float>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool Live20Data::LeadData::Reader::getFcw() const {
  return _reader.getDataField<bool>(
      320 * ::capnp::ELEMENTS);
}

inline bool Live20Data::LeadData::Builder::getFcw() {
  return _builder.getDataField<bool>(
      320 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setFcw(bool value) {
  _builder.setDataField<bool>(
      320 * ::capnp::ELEMENTS, value);
}

inline bool Live20Data::LeadData::Reader::getStatus() const {
  return _reader.getDataField<bool>(
      321 * ::capnp::ELEMENTS);
}

inline bool Live20Data::LeadData::Builder::getStatus() {
  return _builder.getDataField<bool>(
      321 * ::capnp::ELEMENTS);
}
inline void Live20Data::LeadData::Builder::setStatus(bool value) {
  _builder.setDataField<bool>(
      321 * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasWarpMatrix() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrix() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveCalibrationData::Reader::getWarpMatrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::getWarpMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrix( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrix(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::initWarpMatrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrix(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveCalibrationData::Builder::disownWarpMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int8_t LiveCalibrationData::Reader::getCalStatus() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalStatus() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveCalibrationData::Reader::getCalCycle() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveCalibrationData::Builder::getCalCycle() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalCycle( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int8_t LiveCalibrationData::Reader::getCalPerc() const {
  return _reader.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalPerc() {
  return _builder.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalPerc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveTracks::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveTracks::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getDRel() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getDRel() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getYRel() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getYRel() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getVRel() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getVRel() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getARel() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getARel() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setARel(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getTimeStamp() const {
  return _reader.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getTimeStamp() {
  return _builder.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setTimeStamp(float value) {
  _builder.setDataField<float>(
      5 * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getStatus() const {
  return _reader.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getStatus() {
  return _builder.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setStatus(float value) {
  _builder.setDataField<float>(
      6 * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getCurrentTime() const {
  return _reader.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getCurrentTime() {
  return _builder.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setCurrentTime(float value) {
  _builder.setDataField<float>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool LiveTracks::Reader::getStationary() const {
  return _reader.getDataField<bool>(
      256 * ::capnp::ELEMENTS);
}

inline bool LiveTracks::Builder::getStationary() {
  return _builder.getDataField<bool>(
      256 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setStationary(bool value) {
  _builder.setDataField<bool>(
      256 * ::capnp::ELEMENTS, value);
}

inline bool LiveTracks::Reader::getOncoming() const {
  return _reader.getDataField<bool>(
      257 * ::capnp::ELEMENTS);
}

inline bool LiveTracks::Builder::getOncoming() {
  return _builder.getDataField<bool>(
      257 * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setOncoming(bool value) {
  _builder.setDataField<bool>(
      257 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getVEgo() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getVEgo() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setVEgo(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getAEgoDEPRECATED() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getAEgoDEPRECATED() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setAEgoDEPRECATED(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getVPid() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getVPid() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setVPid(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getVTargetLead() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getVTargetLead() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setVTargetLead(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getUpAccelCmd() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getUpAccelCmd() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setUpAccelCmd(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getUiAccelCmd() const {
  return _reader.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getUiAccelCmd() {
  return _builder.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setUiAccelCmd(float value) {
  _builder.setDataField<float>(
      5 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getYActual() const {
  return _reader.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getYActual() {
  return _builder.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setYActual(float value) {
  _builder.setDataField<float>(
      6 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getYDes() const {
  return _reader.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getYDes() {
  return _builder.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setYDes(float value) {
  _builder.setDataField<float>(
      7 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getUpSteer() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getUpSteer() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setUpSteer(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getUiSteer() const {
  return _reader.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getUiSteer() {
  return _builder.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setUiSteer(float value) {
  _builder.setDataField<float>(
      9 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getATargetMin() const {
  return _reader.getDataField<float>(
      10 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getATargetMin() {
  return _builder.getDataField<float>(
      10 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setATargetMin(float value) {
  _builder.setDataField<float>(
      10 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getATargetMax() const {
  return _reader.getDataField<float>(
      11 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getATargetMax() {
  return _builder.getDataField<float>(
      11 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setATargetMax(float value) {
  _builder.setDataField<float>(
      11 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getJerkFactor() const {
  return _reader.getDataField<float>(
      12 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getJerkFactor() {
  return _builder.getDataField<float>(
      12 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setJerkFactor(float value) {
  _builder.setDataField<float>(
      12 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getAngleSteers() const {
  return _reader.getDataField<float>(
      13 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getAngleSteers() {
  return _builder.getDataField<float>(
      13 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setAngleSteers(float value) {
  _builder.setDataField<float>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Live100Data::Reader::getHudLeadDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::int32_t Live100Data::Builder::getHudLeadDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      14 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setHudLeadDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline float Live100Data::Reader::getCumLagMs() const {
  return _reader.getDataField<float>(
      15 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getCumLagMs() {
  return _builder.getDataField<float>(
      15 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setCumLagMs(float value) {
  _builder.setDataField<float>(
      15 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Live100Data::Reader::getCanMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Live100Data::Builder::getCanMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setCanMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Live100Data::Reader::getL20MonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Live100Data::Builder::getL20MonoTime() {
  return _builder.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setL20MonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Live100Data::Reader::getMdMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Live100Data::Builder::getMdMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setMdMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline bool Live100Data::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      704 * ::capnp::ELEMENTS);
}

inline bool Live100Data::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      704 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      704 * ::capnp::ELEMENTS, value);
}

inline bool Live100Data::Reader::getSteerOverride() const {
  return _reader.getDataField<bool>(
      705 * ::capnp::ELEMENTS);
}

inline bool Live100Data::Builder::getSteerOverride() {
  return _builder.getDataField<bool>(
      705 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setSteerOverride(bool value) {
  _builder.setDataField<bool>(
      705 * ::capnp::ELEMENTS, value);
}

inline bool Live100Data::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Live100Data::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Live100Data::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Live100Data::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Live100Data::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Live100Data::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Live100Data::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Live100Data::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Live100Data::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline float Live100Data::Reader::getVCruise() const {
  return _reader.getDataField<float>(
      23 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getVCruise() {
  return _builder.getDataField<float>(
      23 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setVCruise(float value) {
  _builder.setDataField<float>(
      23 * ::capnp::ELEMENTS, value);
}

inline bool Live100Data::Reader::getRearViewCam() const {
  return _reader.getDataField<bool>(
      706 * ::capnp::ELEMENTS);
}

inline bool Live100Data::Builder::getRearViewCam() {
  return _builder.getDataField<bool>(
      706 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setRearViewCam(bool value) {
  _builder.setDataField<bool>(
      706 * ::capnp::ELEMENTS, value);
}

inline bool Live100Data::Reader::hasAlertText1() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Live100Data::Builder::hasAlertText1() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Live100Data::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Live100Data::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Live100Data::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Live100Data::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Live100Data::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Live100Data::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Live100Data::Reader::hasAlertText2() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Live100Data::Builder::hasAlertText2() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Live100Data::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Live100Data::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Live100Data::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Live100Data::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Live100Data::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Live100Data::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline float Live100Data::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      24 * ::capnp::ELEMENTS);
}

inline float Live100Data::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      24 * ::capnp::ELEMENTS);
}
inline void Live100Data::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      24 * ::capnp::ELEMENTS, value);
}

inline bool LiveEventData::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool LiveEventData::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveEventData::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveEventData::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void LiveEventData::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveEventData::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void LiveEventData::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveEventData::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int32_t LiveEventData::Reader::getValue() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveEventData::Builder::getValue() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void LiveEventData::Builder::setValue( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ModelData::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getPath() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setPath( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptPath(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLeftLane() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLeftLane() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getLeftLane() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getLeftLane() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLeftLane( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLeftLane(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasRightLane() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasRightLane() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getRightLane() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getRightLane() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setRightLane( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptRightLane(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLead() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLead() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::LeadData::Reader ModelData::Reader::getLead() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::getLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::LeadData::Pipeline ModelData::Pipeline::getLead() {
  return  ::cereal::ModelData::LeadData::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLead( ::cereal::ModelData::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::initLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLead(
    ::capnp::Orphan< ::cereal::ModelData::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::LeadData> ModelData::Builder::disownLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasSettings() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasSettings() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::ModelSettings::Reader ModelData::Reader::getSettings() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::ModelSettings::Builder ModelData::Builder::getSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::ModelSettings::Pipeline ModelData::Pipeline::getSettings() {
  return  ::cereal::ModelData::ModelSettings::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setSettings( ::cereal::ModelData::ModelSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::ModelSettings::Builder ModelData::Builder::initSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptSettings(
    ::capnp::Orphan< ::cereal::ModelData::ModelSettings>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::ModelSettings> ModelData::Builder::disownSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool ModelData::PathData::Reader::hasPoints() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::PathData::Builder::hasPoints() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::PathData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ModelData::PathData::Builder::setPoints( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void ModelData::PathData::Builder::setPoints(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ModelData::PathData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::PathData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline float ModelData::PathData::Reader::getProb() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float ModelData::PathData::Builder::getProb() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void ModelData::PathData::Builder::setProb(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float ModelData::PathData::Reader::getStd() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float ModelData::PathData::Builder::getStd() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void ModelData::PathData::Builder::setStd(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getDist() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getDist() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setDist(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getProb() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getProb() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setProb(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getStd() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getStd() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setStd(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxX() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxX() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxX( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxY() const {
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxY() {
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxY( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxWidth() const {
  return _reader.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxWidth() {
  return _builder.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxWidth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxHeight() const {
  return _reader.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxHeight() {
  return _builder.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxHeight( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool ModelData::ModelSettings::Reader::hasBoxProjection() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasBoxProjection() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::ModelSettings::Reader::getBoxProjection() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::getBoxProjection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setBoxProjection( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setBoxProjection(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::initBoxProjection(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptBoxProjection(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::ModelSettings::Builder::disownBoxProjection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ModelData::ModelSettings::Reader::hasYuvCorrection() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasYuvCorrection() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::ModelSettings::Reader::getYuvCorrection() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::getYuvCorrection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setYuvCorrection( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setYuvCorrection(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::initYuvCorrection(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptYuvCorrection(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::ModelSettings::Builder::disownYuvCorrection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t CalibrationFeatures::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CalibrationFeatures::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void CalibrationFeatures::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool CalibrationFeatures::Reader::hasP0() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasP0() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CalibrationFeatures::Reader::getP0() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::getP0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setP0( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setP0(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::initP0(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptP0(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CalibrationFeatures::Builder::disownP0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool CalibrationFeatures::Reader::hasP1() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasP1() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CalibrationFeatures::Reader::getP1() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::getP1() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setP1( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setP1(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::initP1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptP1(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CalibrationFeatures::Builder::disownP1() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool CalibrationFeatures::Reader::hasStatus() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasStatus() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t>::Reader CalibrationFeatures::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t>::Builder CalibrationFeatures::Builder::getStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setStatus( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setStatus(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t>::Builder CalibrationFeatures::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptStatus(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> CalibrationFeatures::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint32_t EncodeIndex::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::cereal::EncodeIndex::Type EncodeIndex::Reader::getType() const {
  return _reader.getDataField< ::cereal::EncodeIndex::Type>(
      2 * ::capnp::ELEMENTS);
}

inline  ::cereal::EncodeIndex::Type EncodeIndex::Builder::getType() {
  return _builder.getDataField< ::cereal::EncodeIndex::Type>(
      2 * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setType( ::cereal::EncodeIndex::Type value) {
  _builder.setDataField< ::cereal::EncodeIndex::Type>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getEncodeId() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getEncodeId() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setEncodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t EncodeIndex::Reader::getSegmentNum() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t EncodeIndex::Builder::getSegmentNum() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentNum( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getSegmentId() const {
  return _reader.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getSegmentId() {
  return _builder.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AndroidLogEntry::Reader::getId() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t AndroidLogEntry::Builder::getId() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AndroidLogEntry::Reader::getTs() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t AndroidLogEntry::Builder::getTs() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setTs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AndroidLogEntry::Reader::getPriority() const {
  return _reader.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint8_t AndroidLogEntry::Builder::getPriority() {
  return _builder.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setPriority( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidLogEntry::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidLogEntry::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidLogEntry::Reader::getTid() const {
  return _reader.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidLogEntry::Builder::getTid() {
  return _builder.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool AndroidLogEntry::Reader::hasTag() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AndroidLogEntry::Builder::hasTag() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AndroidLogEntry::Reader::getTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::getTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AndroidLogEntry::Builder::setTag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::initTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void AndroidLogEntry::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AndroidLogEntry::Builder::disownTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool AndroidLogEntry::Reader::hasMessage() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool AndroidLogEntry::Builder::hasMessage() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AndroidLogEntry::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void AndroidLogEntry::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void AndroidLogEntry::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AndroidLogEntry::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t LogRotate::Reader::getSegmentNum() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t LogRotate::Builder::getSegmentNum() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void LogRotate::Builder::setSegmentNum( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool LogRotate::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool LogRotate::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LogRotate::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LogRotate::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void LogRotate::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LogRotate::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void LogRotate::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LogRotate::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::cereal::Event::Which Event::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline  ::cereal::Event::Which Event::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Reader::getLogMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Builder::getLogMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Event::Builder::setLogMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Event::Reader::isInitData() const {
  return which() == Event::INIT_DATA;
}
inline bool Event::Builder::isInitData() {
  return which() == Event::INIT_DATA;
}
inline bool Event::Reader::hasInitData() const {
  if (which() != Event::INIT_DATA) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasInitData() {
  if (which() != Event::INIT_DATA) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::Reader Event::Reader::getInitData() const {
  KJ_IREQUIRE(which() == Event::INIT_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::InitData::Builder Event::Builder::getInitData() {
  KJ_IREQUIRE(which() == Event::INIT_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setInitData( ::cereal::InitData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::Builder Event::Builder::initInitData() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::INIT_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptInitData(
    ::capnp::Orphan< ::cereal::InitData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData> Event::Builder::disownInitData() {
  KJ_IREQUIRE(which() == Event::INIT_DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isFrame() const {
  return which() == Event::FRAME;
}
inline bool Event::Builder::isFrame() {
  return which() == Event::FRAME;
}
inline bool Event::Reader::hasFrame() const {
  if (which() != Event::FRAME) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasFrame() {
  if (which() != Event::FRAME) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getFrame() const {
  KJ_IREQUIRE(which() == Event::FRAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getFrame() {
  KJ_IREQUIRE(which() == Event::FRAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setFrame( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::FRAME);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initFrame() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::FRAME);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptFrame(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::FRAME);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownFrame() {
  KJ_IREQUIRE(which() == Event::FRAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsNMEA() const {
  return which() == Event::GPS_N_M_E_A;
}
inline bool Event::Builder::isGpsNMEA() {
  return which() == Event::GPS_N_M_E_A;
}
inline bool Event::Reader::hasGpsNMEA() const {
  if (which() != Event::GPS_N_M_E_A) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsNMEA() {
  if (which() != Event::GPS_N_M_E_A) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GPSNMEAData::Reader Event::Reader::getGpsNMEA() const {
  KJ_IREQUIRE(which() == Event::GPS_N_M_E_A,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::GPSNMEAData::Builder Event::Builder::getGpsNMEA() {
  KJ_IREQUIRE(which() == Event::GPS_N_M_E_A,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsNMEA( ::cereal::GPSNMEAData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::GPSNMEAData::Builder Event::Builder::initGpsNMEA() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsNMEA(
    ::capnp::Orphan< ::cereal::GPSNMEAData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GPSNMEAData> Event::Builder::disownGpsNMEA() {
  KJ_IREQUIRE(which() == Event::GPS_N_M_E_A,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isSensorEventDEPRECATED() const {
  return which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isSensorEventDEPRECATED() {
  return which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasSensorEventDEPRECATED() const {
  if (which() != Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSensorEventDEPRECATED() {
  if (which() != Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getSensorEventDEPRECATED() const {
  KJ_IREQUIRE(which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getSensorEventDEPRECATED() {
  KJ_IREQUIRE(which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setSensorEventDEPRECATED( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initSensorEventDEPRECATED() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptSensorEventDEPRECATED(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownSensorEventDEPRECATED() {
  KJ_IREQUIRE(which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isCan() const {
  return which() == Event::CAN;
}
inline bool Event::Builder::isCan() {
  return which() == Event::CAN;
}
inline bool Event::Reader::hasCan() const {
  if (which() != Event::CAN) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCan() {
  if (which() != Event::CAN) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData>::Reader Event::Reader::getCan() const {
  KJ_IREQUIRE(which() == Event::CAN,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::getCan() {
  KJ_IREQUIRE(which() == Event::CAN,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setCan( ::capnp::List< ::cereal::CanData>::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::initCan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> Event::Builder::disownCan() {
  KJ_IREQUIRE(which() == Event::CAN,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isThermal() const {
  return which() == Event::THERMAL;
}
inline bool Event::Builder::isThermal() {
  return which() == Event::THERMAL;
}
inline bool Event::Reader::hasThermal() const {
  if (which() != Event::THERMAL) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasThermal() {
  if (which() != Event::THERMAL) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ThermalData::Reader Event::Reader::getThermal() const {
  KJ_IREQUIRE(which() == Event::THERMAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::ThermalData::Builder Event::Builder::getThermal() {
  KJ_IREQUIRE(which() == Event::THERMAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setThermal( ::cereal::ThermalData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::THERMAL);
  ::capnp::_::PointerHelpers< ::cereal::ThermalData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::ThermalData::Builder Event::Builder::initThermal() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::THERMAL);
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptThermal(
    ::capnp::Orphan< ::cereal::ThermalData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::THERMAL);
  ::capnp::_::PointerHelpers< ::cereal::ThermalData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ThermalData> Event::Builder::disownThermal() {
  KJ_IREQUIRE(which() == Event::THERMAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isLive100() const {
  return which() == Event::LIVE100;
}
inline bool Event::Builder::isLive100() {
  return which() == Event::LIVE100;
}
inline bool Event::Reader::hasLive100() const {
  if (which() != Event::LIVE100) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLive100() {
  if (which() != Event::LIVE100) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Live100Data::Reader Event::Reader::getLive100() const {
  KJ_IREQUIRE(which() == Event::LIVE100,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Live100Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::Live100Data::Builder Event::Builder::getLive100() {
  KJ_IREQUIRE(which() == Event::LIVE100,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Live100Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setLive100( ::cereal::Live100Data::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE100);
  ::capnp::_::PointerHelpers< ::cereal::Live100Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::Live100Data::Builder Event::Builder::initLive100() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE100);
  return ::capnp::_::PointerHelpers< ::cereal::Live100Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLive100(
    ::capnp::Orphan< ::cereal::Live100Data>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE100);
  ::capnp::_::PointerHelpers< ::cereal::Live100Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Live100Data> Event::Builder::disownLive100() {
  KJ_IREQUIRE(which() == Event::LIVE100,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Live100Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveEventDEPRECATED() const {
  return which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveEventDEPRECATED() {
  return which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveEventDEPRECATED() const {
  if (which() != Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveEventDEPRECATED() {
  if (which() != Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LiveEventData>::Reader Event::Reader::getLiveEventDEPRECATED() const {
  KJ_IREQUIRE(which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LiveEventData>::Builder Event::Builder::getLiveEventDEPRECATED() {
  KJ_IREQUIRE(which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveEventDEPRECATED( ::capnp::List< ::cereal::LiveEventData>::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LiveEventData>::Builder Event::Builder::initLiveEventDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLiveEventDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>> Event::Builder::disownLiveEventDEPRECATED() {
  KJ_IREQUIRE(which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isModel() const {
  return which() == Event::MODEL;
}
inline bool Event::Builder::isModel() {
  return which() == Event::MODEL;
}
inline bool Event::Reader::hasModel() const {
  if (which() != Event::MODEL) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasModel() {
  if (which() != Event::MODEL) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::Reader Event::Reader::getModel() const {
  KJ_IREQUIRE(which() == Event::MODEL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::Builder Event::Builder::getModel() {
  KJ_IREQUIRE(which() == Event::MODEL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setModel( ::cereal::ModelData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::MODEL);
  ::capnp::_::PointerHelpers< ::cereal::ModelData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::Builder Event::Builder::initModel() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::MODEL);
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptModel(
    ::capnp::Orphan< ::cereal::ModelData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::MODEL);
  ::capnp::_::PointerHelpers< ::cereal::ModelData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData> Event::Builder::disownModel() {
  KJ_IREQUIRE(which() == Event::MODEL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isFeatures() const {
  return which() == Event::FEATURES;
}
inline bool Event::Builder::isFeatures() {
  return which() == Event::FEATURES;
}
inline bool Event::Reader::hasFeatures() const {
  if (which() != Event::FEATURES) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasFeatures() {
  if (which() != Event::FEATURES) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CalibrationFeatures::Reader Event::Reader::getFeatures() const {
  KJ_IREQUIRE(which() == Event::FEATURES,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::CalibrationFeatures::Builder Event::Builder::getFeatures() {
  KJ_IREQUIRE(which() == Event::FEATURES,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setFeatures( ::cereal::CalibrationFeatures::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::FEATURES);
  ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::CalibrationFeatures::Builder Event::Builder::initFeatures() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::FEATURES);
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptFeatures(
    ::capnp::Orphan< ::cereal::CalibrationFeatures>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::FEATURES);
  ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CalibrationFeatures> Event::Builder::disownFeatures() {
  KJ_IREQUIRE(which() == Event::FEATURES,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isSensorEvents() const {
  return which() == Event::SENSOR_EVENTS;
}
inline bool Event::Builder::isSensorEvents() {
  return which() == Event::SENSOR_EVENTS;
}
inline bool Event::Reader::hasSensorEvents() const {
  if (which() != Event::SENSOR_EVENTS) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSensorEvents() {
  if (which() != Event::SENSOR_EVENTS) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::SensorEventData>::Reader Event::Reader::getSensorEvents() const {
  KJ_IREQUIRE(which() == Event::SENSOR_EVENTS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::SensorEventData>::Builder Event::Builder::getSensorEvents() {
  KJ_IREQUIRE(which() == Event::SENSOR_EVENTS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setSensorEvents( ::capnp::List< ::cereal::SensorEventData>::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENSOR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::SensorEventData>::Builder Event::Builder::initSensorEvents(unsigned int size) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENSOR_EVENTS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSensorEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENSOR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>> Event::Builder::disownSensorEvents() {
  KJ_IREQUIRE(which() == Event::SENSOR_EVENTS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isHealth() const {
  return which() == Event::HEALTH;
}
inline bool Event::Builder::isHealth() {
  return which() == Event::HEALTH;
}
inline bool Event::Reader::hasHealth() const {
  if (which() != Event::HEALTH) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasHealth() {
  if (which() != Event::HEALTH) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::HealthData::Reader Event::Reader::getHealth() const {
  KJ_IREQUIRE(which() == Event::HEALTH,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::HealthData::Builder Event::Builder::getHealth() {
  KJ_IREQUIRE(which() == Event::HEALTH,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setHealth( ::cereal::HealthData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::HEALTH);
  ::capnp::_::PointerHelpers< ::cereal::HealthData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::HealthData::Builder Event::Builder::initHealth() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::HEALTH);
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptHealth(
    ::capnp::Orphan< ::cereal::HealthData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::HEALTH);
  ::capnp::_::PointerHelpers< ::cereal::HealthData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::HealthData> Event::Builder::disownHealth() {
  KJ_IREQUIRE(which() == Event::HEALTH,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isLive20() const {
  return which() == Event::LIVE20;
}
inline bool Event::Builder::isLive20() {
  return which() == Event::LIVE20;
}
inline bool Event::Reader::hasLive20() const {
  if (which() != Event::LIVE20) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLive20() {
  if (which() != Event::LIVE20) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Live20Data::Reader Event::Reader::getLive20() const {
  KJ_IREQUIRE(which() == Event::LIVE20,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::Live20Data::Builder Event::Builder::getLive20() {
  KJ_IREQUIRE(which() == Event::LIVE20,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setLive20( ::cereal::Live20Data::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE20);
  ::capnp::_::PointerHelpers< ::cereal::Live20Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::Live20Data::Builder Event::Builder::initLive20() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE20);
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLive20(
    ::capnp::Orphan< ::cereal::Live20Data>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE20);
  ::capnp::_::PointerHelpers< ::cereal::Live20Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Live20Data> Event::Builder::disownLive20() {
  KJ_IREQUIRE(which() == Event::LIVE20,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Live20Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveUIDEPRECATED() const {
  return which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveUIDEPRECATED() {
  return which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveUIDEPRECATED() const {
  if (which() != Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveUIDEPRECATED() {
  if (which() != Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveUI::Reader Event::Reader::getLiveUIDEPRECATED() const {
  KJ_IREQUIRE(which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::LiveUI::Builder Event::Builder::getLiveUIDEPRECATED() {
  KJ_IREQUIRE(which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveUIDEPRECATED( ::cereal::LiveUI::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveUI>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveUI::Builder Event::Builder::initLiveUIDEPRECATED() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveUIDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveUI>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveUI>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveUI> Event::Builder::disownLiveUIDEPRECATED() {
  KJ_IREQUIRE(which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isEncodeIdx() const {
  return which() == Event::ENCODE_IDX;
}
inline bool Event::Builder::isEncodeIdx() {
  return which() == Event::ENCODE_IDX;
}
inline bool Event::Reader::hasEncodeIdx() const {
  if (which() != Event::ENCODE_IDX) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasEncodeIdx() {
  if (which() != Event::ENCODE_IDX) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getEncodeIdx() const {
  KJ_IREQUIRE(which() == Event::ENCODE_IDX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getEncodeIdx() {
  KJ_IREQUIRE(which() == Event::ENCODE_IDX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initEncodeIdx() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownEncodeIdx() {
  KJ_IREQUIRE(which() == Event::ENCODE_IDX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveTracks() const {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Builder::isLiveTracks() {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Reader::hasLiveTracks() const {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveTracks() {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LiveTracks>::Reader Event::Reader::getLiveTracks() const {
  KJ_IREQUIRE(which() == Event::LIVE_TRACKS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LiveTracks>::Builder Event::Builder::getLiveTracks() {
  KJ_IREQUIRE(which() == Event::LIVE_TRACKS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveTracks( ::capnp::List< ::cereal::LiveTracks>::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LiveTracks>::Builder Event::Builder::initLiveTracks(unsigned int size) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLiveTracks(
    ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>> Event::Builder::disownLiveTracks() {
  KJ_IREQUIRE(which() == Event::LIVE_TRACKS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isSendcan() const {
  return which() == Event::SENDCAN;
}
inline bool Event::Builder::isSendcan() {
  return which() == Event::SENDCAN;
}
inline bool Event::Reader::hasSendcan() const {
  if (which() != Event::SENDCAN) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSendcan() {
  if (which() != Event::SENDCAN) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData>::Reader Event::Reader::getSendcan() const {
  KJ_IREQUIRE(which() == Event::SENDCAN,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::getSendcan() {
  KJ_IREQUIRE(which() == Event::SENDCAN,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setSendcan( ::capnp::List< ::cereal::CanData>::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::initSendcan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENDCAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSendcan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> Event::Builder::disownSendcan() {
  KJ_IREQUIRE(which() == Event::SENDCAN,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isLogMessage() const {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Builder::isLogMessage() {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Reader::hasLogMessage() const {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLogMessage() {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Event::Reader::getLogMessage() const {
  KJ_IREQUIRE(which() == Event::LOG_MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Event::Builder::getLogMessage() {
  KJ_IREQUIRE(which() == Event::LOG_MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setLogMessage( ::capnp::Text::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Event::Builder::initLogMessage(unsigned int size) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLogMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Event::Builder::disownLogMessage() {
  KJ_IREQUIRE(which() == Event::LOG_MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveCalibration() const {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Builder::isLiveCalibration() {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Reader::hasLiveCalibration() const {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveCalibration() {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveCalibrationData::Reader Event::Reader::getLiveCalibration() const {
  KJ_IREQUIRE(which() == Event::LIVE_CALIBRATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::getLiveCalibration() {
  KJ_IREQUIRE(which() == Event::LIVE_CALIBRATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveCalibration( ::cereal::LiveCalibrationData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::initLiveCalibration() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveCalibration(
    ::capnp::Orphan< ::cereal::LiveCalibrationData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveCalibrationData> Event::Builder::disownLiveCalibration() {
  KJ_IREQUIRE(which() == Event::LIVE_CALIBRATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isAndroidLogEntry() const {
  return which() == Event::ANDROID_LOG_ENTRY;
}
inline bool Event::Builder::isAndroidLogEntry() {
  return which() == Event::ANDROID_LOG_ENTRY;
}
inline bool Event::Reader::hasAndroidLogEntry() const {
  if (which() != Event::ANDROID_LOG_ENTRY) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAndroidLogEntry() {
  if (which() != Event::ANDROID_LOG_ENTRY) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidLogEntry::Reader Event::Reader::getAndroidLogEntry() const {
  KJ_IREQUIRE(which() == Event::ANDROID_LOG_ENTRY,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::AndroidLogEntry::Builder Event::Builder::getAndroidLogEntry() {
  KJ_IREQUIRE(which() == Event::ANDROID_LOG_ENTRY,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setAndroidLogEntry( ::cereal::AndroidLogEntry::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::ANDROID_LOG_ENTRY);
  ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidLogEntry::Builder Event::Builder::initAndroidLogEntry() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::ANDROID_LOG_ENTRY);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAndroidLogEntry(
    ::capnp::Orphan< ::cereal::AndroidLogEntry>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::ANDROID_LOG_ENTRY);
  ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidLogEntry> Event::Builder::disownAndroidLogEntry() {
  KJ_IREQUIRE(which() == Event::ANDROID_LOG_ENTRY,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsLocation() const {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Builder::isGpsLocation() {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Reader::hasGpsLocation() const {
  if (which() != Event::GPS_LOCATION) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsLocation() {
  if (which() != Event::GPS_LOCATION) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader Event::Reader::getGpsLocation() const {
  KJ_IREQUIRE(which() == Event::GPS_LOCATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::getGpsLocation() {
  KJ_IREQUIRE(which() == Event::GPS_LOCATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsLocation( ::cereal::GpsLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::initGpsLocation() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsLocation(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> Event::Builder::disownGpsLocation() {
  KJ_IREQUIRE(which() == Event::GPS_LOCATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarState() const {
  return which() == Event::CAR_STATE;
}
inline bool Event::Builder::isCarState() {
  return which() == Event::CAR_STATE;
}
inline bool Event::Reader::hasCarState() const {
  if (which() != Event::CAR_STATE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarState() {
  if (which() != Event::CAR_STATE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::Reader Event::Reader::getCarState() const {
  KJ_IREQUIRE(which() == Event::CAR_STATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::CarState::Builder Event::Builder::getCarState() {
  KJ_IREQUIRE(which() == Event::CAR_STATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setCarState( ::cereal::CarState::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::Builder Event::Builder::initCarState() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarState(
    ::capnp::Orphan< ::cereal::CarState>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState> Event::Builder::disownCarState() {
  KJ_IREQUIRE(which() == Event::CAR_STATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarControl() const {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Builder::isCarControl() {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Reader::hasCarControl() const {
  if (which() != Event::CAR_CONTROL) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarControl() {
  if (which() != Event::CAR_CONTROL) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Reader Event::Reader::getCarControl() const {
  KJ_IREQUIRE(which() == Event::CAR_CONTROL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Builder Event::Builder::getCarControl() {
  KJ_IREQUIRE(which() == Event::CAR_CONTROL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setCarControl( ::cereal::CarControl::Reader value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Builder Event::Builder::initCarControl() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarControl(
    ::capnp::Orphan< ::cereal::CarControl>&& value) {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl> Event::Builder::disownCarControl() {
  KJ_IREQUIRE(which() == Event::CAR_CONTROL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_f3b1f17e25a4285b_
